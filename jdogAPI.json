{
	"jDog" : "version 1.0"

	, "Methods" : [

		{
			"Name" : "add"
			, "Usage" : [
					[ "Path", "Thing" ]
				]
			, "Tags" : [ "spawn", "test", "synchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				"PAGE.add('Constructors.Login', function( $root, options ){  \n   var exports = {\n     $root : $root\n     , options : options\n   }\n\n  function privateFunction() {\n  }\n\n  exports.publicFunction = function() {\n  }\n\n   return exports \n })"
				, "// assuming Select2 was defined elsewhere\nPAGE.add('Lib.Select2', Select2)"
				, "PAGE.add('Modules.home', (function(){  ...  }()))"
				, "PAGE.add('Properties.UserId', 12345)"
				, "PAGE.add('BaseClass', BaseClass(1234))"
				, "PAGE.add('BaseClass.ticker', new Ticker('tickerDiv'))"
				, "var ticker = PAGE.add('BaseClass.ticker', new Ticker('tickerDiv')) // example returning"
				, "PAGE.add(\"Constructors.Login\", function($form, options) {\n\n options.showError = options.showError || false\n\n var dog = {\n  $form : $form\n  , $html : undefined // see below\n  , options : options\n }\n , ref = dog.ref = { }\n\n // employs the PAGE events extension \n PAGE.ext.events(dog, {\n  Success : []\n  , Fail : []\n })\n\n function build() {\n  var html = ''\n\n  html += \"&#x3c;div class='pad'&#x3e;\"\n  html += \"&#x3c;div class='row'&#x3e;\"\n  html += \"&#x3c;input type='text' name='UserName' /&#x3e;\"\n  html += \"&#x3c;/div&#x3e;\"\n  html += \"&#x3c;div class='row'&#x3e;\"\n  html += \"&#x3c;input type='text' name='Password' /&#x3e;\"\n  html += \"&#x3c;/div&#x3e;\"\n  html += \"&#x3c;div class='row'&#x3e;\"\n  html += \"&#x3c;button&#x3e;Submit&#x3c;/button&#x3e;\"\n  html += \"&#x3c;/div&#x3e;\"\n  html += \"&#x3c;/div&#x3e;\"\n\n  dog.$form.empty()\n  dog.$html = $(html).appendTo(dog.$form)\n }\n\n function events() {\n\n  ref.Validation(dog.$form, function success(data) {\n   dog.triggerEvent(\"Success\", data.id, data.name)\n  }, function fail(msg, err) {\n   dog.triggerEvent(\"Fail\", msg, err)\n  })\n\n }\n \n function init() {\n  build()\n  events()\n }\n\n PAGE.wait(\n  \"Modules.dataService.read\"\n  , \"Constructors.Validation\"\n  , ref\n  , init)\n\n return dog\n\n})\n"
			]
			, "Description" : "This is the foundation of adding new items into the global name space. It's mean't to be extremely fast to add. If you have existing code for example, you can always add it after the fact as many of the following examples will demonstrate."
			, "Definitions" : {
				"Path" : "Path of the item added, example Constructors.YourConstructor"
				, "Thing" : "Any variable or literal"
			}
			, "Returns" : "the Thing added gets returned"
		}

		, {
			"Name" : "wait"
			, "Usage" : [
					[ "Path", "Callback" ]
					, [ "String", "Function" ]
					, [ "Path", "Path+", "Ref", "Callback" ]
					, [ "String", "String+", "Object", "Function" ]
				]
			, "Tags" : [ "wait", "asynchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				"PAGE.wait('Modules.dataService.read', function(read){ ... }))"
				, "PAGE.wait(\n 'Modules.dataService.read',\n 'Constructors.LocalStorage',\n ref,\n function(){ ... }))"
				, " PAGE.wait( \n  'Modules.dataService' \n  , 'window.dropDown' \n  , 'Constructors.Login' \n  , ref \n  , init)"
			]
			, "Description" : "This is the foundation of waiting until library items are ready. Notice the Ref object. Unlike require js which pushes returns the modules in the arguments of the function, PAGE uses Ref. Ref is an object. In javascript, objects are passed by reference. By passing in an object into the second parameter, that will be the object which receives all of the library items being waited for. The name will be the name of the library item being waited for. For example, if you are waiting for Constructors.Pork, the ref will return { Pork : Object }"
			, "Definitions" : {
				"Path" : "Path of the library item required, example Constructors.YourConstructor"
				, "Ref" : "Reference Object to pass all library items into"
				, "Callback" : "Function to call when all is loaded"
			}
			, "Returns" : "undefined"
		}

		, {
			"Name" : "addWait"
			, "Usage" : [
					[ "Path", "WaitList", "Callback" ]
				]
			, "Tags" : [ "wait", "module pattern", "asynchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				" PAGE.addWait( \n  'Modules.homePage' // path \n  , ['ajax', 'ready', 'Constructors.APIMethods'] // required libraries \n  , function(ref) { \n \n   var exports = { \n   } \n \n   return exports \n \n  })" 
			]
			, "Description" : "Combines the functionality of add and wait into one function. This is a useful function for creating modules."
			, "Definitions" : {
				"Path" : "String - Path of the library item required, example Constructors.YourConstructor"
				, "WaitList" : "Array - list of other libraries required before callback is called"
				, "Callback" : "Function to call when all is loaded"
			}
			, "Returns" : "Undefined"
		}

		, {
			"Name" : "addWait$"
			, "Usage" : [
					[ "Path", "WaitList", "Callback" ]
				]
			, "Tags" : [ "wait", "module pattern", "jQuery", "asynchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				"PAGE.addWait$(\n 'Modules.jdogAPI'\n , [\n  'ajax'\n  , 'ready'\n  , 'Constructors.APIMethod'\n ],\n function(ref){ ... }))"
				, "PAGE.addWait$(\n \"Modules.home\"\n , [\n  \"Constructors.Validation\"\n  , \"Modules.tracking\"\n ]\n , function(ref) {\n\n  var dog = {\n   $loginForm : $(\"#LoginForm\")\n   , $submit : $(\"#LoginForm button.Submit\")\n  }\n\n  function events() {\n\n   dog.validation = ref.Validation(\n    $(\"#LoginForm\")\n    , function success(data) {\n     ref.tracking.track(\n      \"Submit Success\"\n      , data\n      , function() { window.location = \"/dashboard\" })\n    }\n    , function fail() {\n     ref.tracking.track(\"Submit Failed\") \n    })\n\n   dog.$loginForm.submit(function() {\n    ref.tracking.track(\"Submit\") \n   })\n\n  }\n\n  events()\n\n  return dog\n\n })\n"
			]
			, "Description" : "Combines the functionality of add and wait, with jQuery's document.wait into one function. This is a useful function for creating modules with jQuery support."
			, "Definitions" : {
				"Path" : "String - Path of the library item required, example Constructors.YourConstructor"
				, "WaitList" : "Array - list of other libraries required before callback is called"
				, "Callback" : "Function to call when all is loaded"
			}
			, "Returns" : "Undefined"
		}

		, {
			"Name" : "extend"
			, "Usage" : [
					[ "function( puppy, dog, log ) { ... }" ]
				]
			, "Tags" : [ "extend", "module pattern", "extensions", "asynchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				"PAGE.extend(function(puppy, dog, log) {})"
				, "PAGE.extend(function(inst, proto, log) {})"
				, "PAGE.extend(function(inst, proto, log) {\n\n PAGE.spawn(\"ext.events\", function(dog, eventMap) {\n\n  eventMap = eventMap || { }\n\n  dog.events = eventMap\n\n  dog._uniqueEventMap = { }\n\n  // name of event, function to be called on triggerEvent(name)\n  // events are unique, checking both the string of the function, and the callee.caller string as a key\n  dog.addEvent = function(name, func) {\n   var index\n   , key = func.toString() + arguments.callee.caller.toString()\n\n   // if the event type does not exist yet, create it\n   if (!dog.events[name]) dog.events[name] = []\n\n   if (!dog._uniqueEventMap[name]) dog._uniqueEventMap[name] = {}\n\n   // get the index from the array if there, otherwise undefined\n   index = dog._uniqueEventMap[name][key]\n\n   if (index !== undefined) {\n    // adds the function to the array, replacing the older one\n    dog.events[name].splice(index, 1, func)\n    return dog\n   } else {\n    index = dog.events[name].push(func)\n   }\n\n   // now add the index to the key\n   dog._uniqueEventMap[name][key] = (index-1)\n   return dog\n  }\n\n  dog.emptyEvent = function(name) {\n   if (!dog.events[name]) return\n   dog.events[name].length = 0\n  }\n\n  // triggers the functions within the named event array\n  dog.triggerEvent = function(name, args) {\n\n   if (!dog.events[name]) return\n   var events = dog.events[name]\n\n   // args = args || []\n   args = Array.prototype.slice.call(arguments)\n   args.splice(0,1)\n\n   if (events.length) {\n    for (var x in events) (typeof events[x] === \"function\" && events[x].apply(this, args ))\n   }\n   return dog\n  }\n\n\n}, proto)\n\n})\n"
			]
			, "Description" : "This is a function to extend the jDog library. Within the callback are three objects which allow you to overwrite or extend the functionality of jDog itself. Many extensions have already been created, and we hope many more will be made in the future."
			, "Definitions" : {
				"PAGE" : "PAGE is a global variable with both instance properties and prototype properties"
				, "Puppy" : "These are the instance properties (which can also access prototype)"
				, "Dog" : "This is the prototype for PAGE itself"
				, "Log" : "Console logging functionaity"
			}
			, "Returns" : "Undefined"
		}

		, {
			"Name" : "add$"
			, "Usage" : [
					[ "Path", "Thing" ]
				]
			, "Tags" : [ "spawn", "test", "asynchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				"PAGE.add$('Modules.login', (function(){ ... }()))"
			]
			, "Description" : "Combines the functionality of 'add' with jQuery ready. This is a very useful feature for jQuery users as it signals it's safe to call the $ (jQuery) variable. However, notice that unlike PAGE.add, add$ returns undefined."
			, "Definitions" : {
				"Path" : "Path of the item added, example Constructors.YourConstructor"
				, "Thing" : "Any variable or literal"
			}
			, "Returns" : "undefined"
		}

		, {
			"Name" : "exists"
			, "Usage" : [
					[ "Path" ]
					, [ "Path", "Base" ]
					, [ "Path", "Base", "Alternative" ]
				]
			, "Tags" : [ "exists", "synchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				"// checks PAGE.Properties.User\nvar user = PAGE.exists('Properties.User')"
				, "// checks window.Properties.User\nvar user = PAGE.exists('Properties.User', window)"
				, "// checks PAGE.Properties.User, \n// return User if it's there, otherwise the alternative object\nvar user = PAGE.exists('Properties.User', PAGE, { Name : 'John Doe' })"
				, "// checks PAGE.Modules.login.submit, \n// return submit if it's there, otherwise the alternative function\nPAGE.exists('Modules.login.submit', PAGE, function(){})()"
				, "// using exists as boolean check\nif (!PAGE.exists('Properties.User.IsSubscribed')) { ... }"
				, "// adds a property using exists\nPAGE.exists('Properties.User', PAGE, {}).LoggedIn = true"
			]
			, "Description" : "Checks to see if this path exists inside the global PAGE variable, or, alternatively, a specific object. Can be very powerful for preventing null reference errors."
			, "Definitions" : {
				"Path" : "Path of the item added, example Constructors.YourConstructor"
				, "Base" : "optional - Object to search in, defaults to PAGE"
				, "Alternate" : "optional - if it's empty, then return this instead"
			}
			, "Returns" : "the item of the path, or undefined, or alternative"
		}

		, {
			"Name" : "waitExists"
			, "Usage" : [
					[ "Path" ]
					, [ "Path", "Callback" ]
					, [ "Path", "Base", "Callback" ]
				]
			, "Tags" : [ "exists", "asynchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				"PAGE.waitExists('Properties.User', function(User) { ... })"
				, "PAGE.waitExists('Properties.User', window, function(User) { ... })"
			]
			, "Description" : "Waits for one item to load, then triggers callback. Base is optional"
			, "Definitions" : {
				"Path" : "Path of the item, example Constructors.YourConstructor"
				, "Base" : "optional - Object to search in, defaults to PAGE"
				, "Callback" : "Function to call when all is loaded"
			}
			, "Returns" : "undefined"
		}

		, {
			"Name" : "spawn"
			, "Usage" : [
					[ "Path", "Thing" ]
					, [ "Path", "Thing", "Base" ]
				]
			, "Tags" : [ "spawn", "synchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				"PAGE.spawn('SomeVery.long.path.deep.in.your.code', { code : 'blahblahblah' })"
				, "var out = PAGE.spawn('SomeVery.long.path.deep.in.your.code', { code : 'blahblahblah' })"
			]
			, "Description" : "This is the inverse of exists, allows you to put just about anything anywhere in your code."
			, "Definitions" : {
				"Path" : "Path of the item added, example Constructors.YourConstructor"
				, "Thing" : "Any variable or literal"
				, "Base" : "optional - Object to search in, defaults to PAGE"
			}
			, "Returns" : "the thing being spawned"
		}

		, {
			"Name" : "batchWaitRef"
			, "Usage" : [
					[ "WaitList", "Ref", "Callback" ]
					, [ "Array", "Object", "Function" ]
				]
			, "Tags" : [ "wait", "asynchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				"PAGE.batchWaitRef(['Modules.dataService', 'Modules.dataService.read'], ref, function(){ ... }))"
				, "PAGE.batchWaitRef('Modules.dataService.read', 'Constructors.LocalStorage', ref, function(){ ... }))"
			]
			, "Description" : "This is the foundation of waiting until library items are ready."
			, "Definitions" : {
				"WaitList" : "Array - list of other libraries required before callback is called"
				, "Ref" : "Reference Object to pass all library items into"
				, "Callback" : "Function to call when all is loaded"
			}
			, "Returns" : "undefined"
		}

		, {
			"Name" : "getType"
			, "Usage" : [
					[ "Thing" ]
				]
			, "Tags" : [ "utility", "synchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [
				"\n var dog = new Number()\n undefined\n PAGE.getType(dog)\n \"Num\"\n "
			]
			, "Description" : "This is an internal utility that is exposed for those who need it. It outputs the type of any kind of thing passed into it. Useful for Array vs Object, or all the kinds of HTML elements. Also has a special type for jQuery. If one of the major types, Array, String, Object, Boolean, Number, then it outputs as a 3 character string. Array - Arr. String - Str. Object - Obj. Boolean - Boo. Number - Num."
			, "Definitions" : {
				"WaitList" : "Array - list of other libraries required before callback is called"
				, "Ref" : "Reference Object to pass all library items into"
				, "Callback" : "Function to call when all is loaded"
			}
			, "Returns" : "undefined"
		}

		, {
			"Name" : "mapArguments"
			, "Usage" : [
					[ "arguments" ]
				]
			, "Tags" : [ "utility", "synchronous" ]
			, "Source" : [ "page.loader.js" ]
			, "Examples" : [

				" function test() { \n  var map = PAGE.mapArguments(arguments) \n  console.log(map) \n } \n \n test(1234, 'Hello World', 513, {}, [], document.createElement('div')) \n\n Object \n Arr: Array[1] \n HTMLDivElement: Array[1] \n Num: Array[2] \n Obj: Array[1] \n Str: Array[1]\n "

			]
			, "Description" : "This is an internal utility that is exposed for those who need it. It outputs all of the arguments passed in grouped by their type. Primary types are output as 3 characters. Array - Arr. String - Str. Object - Obj. Boolean - Boo. Number - Num."
			, "Definitions" : {
				"arguments" : "The special arguments variable inside a function"
			}
			, "Returns" : "Object with arrays grouped by their type name"
		}

		, {
			"Name" : "loadScript"
			, "Usage" : [
					[ "pathToFile" ]
					, [ "pathToFile", "pathToFile", "pathToFile", "pathToFile" ]
					, [ "pathToFile", "allowCache" ]
					, [ "String", "Boolean" ]
				]
			, "Tags" : [ "utility", "synchronous", "loading" ]
			, "Source" : [ "page.base.js" ]
			, "Examples" : [
				"PAGE.loadScript('/Content/css/buttons.js')"
				, "PAGE.loadScript('/Content/css/buttons.js', true)"
				, " PAGE.loadScript( \n  '/Scripts/page.constructors.dataService.js' \n  , '/Scripts/page.constructors.dataService.read.js' \n  , '/Scripts/page.constructors.dataService.write.js' \n  , '/Scripts/page.modules.dataService.write.js' \n  , '/Scripts/page.modules.dataService.read.js' \n  , true)"
				, " PAGE.loadScript( \n  '~/Scripts/page.constructors.dataService.js' \n  , '~/Scripts/page.constructors.dataService.read.js' \n  , '~/Scripts/page.constructors.dataService.write.js' \n  , '~/Scripts/page.modules.dataService.write.js' \n  , '~/Scripts/page.modules.dataService.read.js' \n  , true)"
			]
			, "Description" : "Though it is discouraged to load production code in none bundled single files, there are times when you need to conditionally load javascript onto a page. Also, it can be a helpful practice when first building out code to have full access to add or remove scripts needed. Load one or many files.<br><br>Note for C# developers, since .NET uses the ~ character for file paths, you are free to use it, the code will ignore it"
			, "Definitions" : {
				"pathToFile" : "Absolute or relative path file script file. Relative paths are relative to URL of current source page"
				, "allowCache" : "If not true the browser will naturally cache the file"
			}
		}

		, {
			"Name" : "loadStyle"
			, "Usage" : [
					[ "pathToFile" ]
					, [ "pathToFile", "pathToFile", "pathToFile", "pathToFile" ]
					, [ "pathToFile", "allowCache" ]
					, [ "String", "Boolean" ]
				]
			, "Tags" : [ "utility", "synchronous", "loading" ]
			, "Source" : [ "page.base.js" ]
			, "Examples" : [
				"PAGE.loadStyle('/Content/css/buttons.css')"
				, "PAGE.loadStyle('/Content/css/buttons.css', true)"

				, " PAGE.loadStyle( \n  '~/Content/Home/Header.css' \n  , '~/Content/Home/footer.css' \n  , '~/Content/Login.css' \n  , '~/Content/style.css' \n  , '~/Content/bootstrap.css')"

			]
			, "Description" : "This is the cousin of loadScript which basically does the same thing. Though it is discouraged to load production code in none bundled single files, there are times when you need to conditionally load css onto a page. Also, it can be a helpful practice when first building out code to have full access to add or remove stylesheets. Loads one or many files."
			, "Definitions" : {
				"pathToFile" : "Absolute or relative path file css file. Relative paths are relative to URL of current source page"
				, "allowCache" : "If not true the browser will naturally cache the file"
			}
		}

		, {
			"Name" : "addExternalLibrary"
			, "Usage" : [
					[ "pathToFile", "globalVariableName", "callback" ]
					, [ "String", "String", "Function" ]
				]
			, "Tags" : [ "utility", "asynchronous", "loading" ]
			, "Source" : [ "page.base.js" ]
			, "Examples" : [

				"PAGE.addExternLibrary( \n  '/Scripts/SpecialDropDown.js' \n  , 'jQuery.fn.dropDrop' \n  , function() { \n \n   $('#Droper').dropDrop() \n \n })"

			]
			, "Description" : "This is useful for loading some 3rd party library, waiting for the results, and then triggering a callback onces it has fully instantiated."

			, "Definitions" : {
				"pathToFile" : "Absolute or relative path file css file. Relative paths are relative to URL of current source page"
				, "globalVariableName" : "This is the path of the loaded script relative to the window object. For example, if the script is the select2 library, which is actually a jQuery extension. then the globalVariableName would be 'jQuery.fn.select2'. However, many times third party libraries are added directly to the window object."
				, "Callback" : "Function to call the globalVariablePath has a value"
			}
		}

		, {
			"Name" : "remove"
			, "Usage" : [
					[ "Path" ]
					, [ "Path", "Base" ]
					, [ "Path", "Base", "swap" ]
					, [ "String", "Object", "Boolean" ]
				]
			, "Tags" : [ "swap", "delete", "remove", "synchronous", "testing", "mocking" ]
			, "Source" : [ "page.base.js" ]
			, "Examples" : [
				"var old = PAGE.remove('Modules.dataService.read.getAll')"
				, "PAGE.remove('Modules.dataService.read.getAll', PAGE, function(){})"
			]
			, "Description" : "This is a specialized utility helpful in testing to remove an item from the PAGE object (or window object). Also can be used to swap out one library for another. It returns the thing being removed, so it could be used to store the removed item somewhere else"
			, "Definitions" : {
				"Path" : "Path of the item to be removed, example Constructors.YourConstructor"
				, "Base" : "optional - Object to search in, defaults to PAGE"
				, "Swap" : "optional - if true then swap the target with this thing, still returns old removed version"
			}
			, "Returns" : "object being removed"
		}

		, {
			"Name" : "SwapLib"
			, "Usage" : [
					[ "hash" ]
					, [ "hash", "Base" ]
					, [ "Object", "Object" ]
				]
			, "Tags" : [ "swap", "delete", "remove", "synchronous", "testing", "mocking" ]
			, "Source" : [ "page.base.js" ]
			, "Examples" : [
			]
			, "Description" : "This is a specialized utility for swapping out many different library items with the ability to restore them later. Used for testing code then returning it back to it's original state."
			, "Definitions" : {
				"hash" : "This is key value pair object, where the key is the original path, and the value is the new thing which replaces it"
				, "Base" : "optional - Object to search in, defaults to PAGE"
			}
			, "Returns" : "new module with restore method"
		}
		, {
			"Name" : "stash"
			, "Usage" : [
					[ "key" ]
				]
			, "Tags" : [ "hiding", "hacking" ]
			, "Source" : [ "page.base.js" ]
			, "Examples" : [
			]
			, "Description" : "This is an experimental method of hiding the PAGE variable."
			, "Definitions" : {
				"key" : "new place to put the PAGE object"
			}
			, "Returns" : "the PAGE variable"
		}

	]
}
